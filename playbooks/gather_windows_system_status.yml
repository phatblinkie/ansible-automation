---
- name: Gather Windows System Status Data
  hosts: win
  gather_facts: false
  tasks:
    - name: Gather data from Windows hosts
      block:
        - name: Test Connections
          wait_for_connection:
            delay: 1
            timeout: 10
        - name: Collect facts
          gather_facts:

        - name: Check if inventory_hostname is an IP address
          set_fact:
            is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
          delegate_to: localhost

        - name: Resolve IP address on control node if not already an IP address
          command: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
          register: ip_lookup
          when: not is_ip_address
          delegate_to: localhost

        - name: Set IP address fact
          set_fact:
            ip_address: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
          delegate_to: localhost

        - name: Initialize system_status_results
          set_fact:
            system_status_results: []

        - name: Gather Hostname
          win_shell: hostname
          register: hostname_output

        - name: Gather Ansible Ping
          win_ping:
          register: ansible_ping_output

        - name: Gather Disk Capacity
          win_shell: (Get-PSDrive C | ForEach-Object {$percentage = [math]::Floor(($_.Used / ($_.Used + $_.Free)) * 100); $percentage.ToString()}) -join ''
          register: disk_capacity_output

        - name: Gather Process Usage
          win_shell: (Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
          register: proc_usage_output

        - name: Gather App Check for WinRM
          win_service:
            name: WinRM
            start_mode: auto
            state: started
          register: app_check_output

        - name: Append Windows data to results
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "ip_address": ip_address,
                  "hostname": hostname_output.stdout.strip(),
                  "ansible_ping": ansible_ping_output.ping,
                  "disk_capacity": disk_capacity_output.stdout.strip(),
                  "proc_usage": proc_usage_output.stdout_lines,
                  "app_check": app_check_output.state,
                  "uptime": ansible_uptime_seconds,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Send custom data to web URL
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php?taskid={{ semaphore_vars.task_details.id }}"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost

        - name: Output
          ansible.builtin.debug:
            msg:
              - "post output:"
              - "{{ postoutput }}"
              - "semaphore vars"
              - "{{ semaphore_vars }}"

        - name: Output results
          debug:
            var: system_status_results

      rescue:
        - name: Initialize system_status_results on rescue
          set_fact:
            system_status_results: []

        - name: Check if inventory_hostname is an IP address
          set_fact:
            is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
          delegate_to: localhost

        - name: Resolve IP address on control node if not already an IP address
          command: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
          register: ip_lookup
          when: not is_ip_address
          delegate_to: localhost

        - name: Set IP address fact
          set_fact:
            ip_address: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
          delegate_to: localhost

        - name: Handle unreachable hosts
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "ip_address": ip_address,
                  "hostname": inventory_hostname,
                  "ansible_ping": "unreachable",
                  "disk_capacity": "0",
                  "proc_usage": ["0"],
                  "app_check": "FAILED",
                  "uptime": 0,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Send custom data to web URL - unreachable hosts
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php?taskid={{ semaphore_vars.task_details.id }}"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost
